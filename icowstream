#pragma once
#include <sstream>
#include <iostream>

namespace std
{
	class Cowt
	{
		std::stringstream str;
		bool whitespace = true;

		void moo()
		{
			std::string mooStr = str.str();
			for (char& ch : mooStr)
			{
				switch (ch)
				{
				case ' ':
				case '\t':
				case '\n':
					whitespace = true;
					break;

				default:
					ch = (whitespace ? 'm' : 'o');
					whitespace = false;
				}
			}
			std::cout << mooStr;
		}

#define _COWT_OP(type) \
	Cowt& operator<<(type _Val) \
	{ \
		str << _Val; \
		moo(); \
		str.str(""); \
		return *this; \
	}

	public:

		_COWT_OP(bool)
		_COWT_OP(char)
		_COWT_OP(short)
		_COWT_OP(unsigned short)
		_COWT_OP(int)
		_COWT_OP(unsigned int)
		_COWT_OP(long)
		_COWT_OP(unsigned long)
		_COWT_OP(long long)
		_COWT_OP(unsigned long long)
		_COWT_OP(float)
		_COWT_OP(double)
		_COWT_OP(long double)
		_COWT_OP(const char*)
		_COWT_OP(const std::string&)
	};

	static Cowt cowt;
}